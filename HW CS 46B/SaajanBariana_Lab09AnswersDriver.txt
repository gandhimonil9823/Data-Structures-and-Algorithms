Saajan Bariana (Driver)
Andy Nagan (Scribe)
Laith Alquran (Scribe)

Part A

1. Done
2. It finds the most amount of duplicates and stores it into max
It then finds where the duplicates start
3. It would never find the max
4. It would throw an out of bounds error

Part B

1. 
public static double area(ArrayList<Point2D.Double> p)
   {
	   int n  = p.size();
	   if (n == 3)
	   {
		   return tTriangleArea(p.get(0), p.get(1), p.get(2));
	   }
	   else
	   {
		   int k = n/2;
		   ArrayList<Point2D.Double> p1 = new ArrayList<>();
		   for (int i = 0; i <= k; i++)
		   {
			   p1.add(p.get(i));
		   }
		   ArrayList<Point2D.Double> p2 = new ArrayList<>();
		   for (int i = k; i < p.size(); i++)
		   {
			   p2.add(p.get(i));
		   }
		   p2.add(p.get(0));
		   return area(p1) + area(p2); 
	   }

2. 
Area: 100.0
Expected: 100.0
Area: 2.598076211353316
Expected: 2.598076211353316
Area: 1400.0
Expected: 1400

3. I had to add the methods and insert objects properly.

Part C

1. You can divide the ArrayLists by 2 or you can make both of them with a length of n/2
2. 
	1. set length to 1 to begin
	2. if boolean variable debug is true
	3. while length variable is less then array's length to say that entire aray not sorted yet
	4. within 1st while loop, set int variable (start) to 0 to begin at beginning of array
	5. add another while loop to make sure start variable value is lower than array length to avoid errors
	6. call merge method
	- 1st parameter: start, want to begin the merge in beginning of array
	- 2nd parameter: start+length-1 in order to get middle element of array
	- 3rd parameter: start+length*2-1 to get ending element of array
	- 4th parameter: a, which array to do the combining in
	- 5th parameter: debug, in order to know if want to print out message in merge method
	7. reset start variable for next iteration by adding length*2 to initial start value
	8. outside 2nd while loop, do length = length*2 in order to follow prompt, which is loop via power of 2s

	create ArrayList<Puzzle> solutions
        if p is solved --> then add p to solutions
        else:
        initialize string variable firstLetter to p.firstLetter()
        if firstLetter is not empty --> then go through for-loop from 0 to 9
        inside for-loop: if p does not contain i --> then set p equal to p.replace(firstLetter, i) and solvePuzzle(p)
        return solutions

3. 
s = the specific string
x = 0
counter = 0
while x < array length
	if the position of x in the array .equals(s)
		counter++

4. Done
5. increase x in the while loop
6. 

 for(goes through sorted element array
{
counter increment
if(i equals to element array length or element array at I doesn't equal element array at I+1)
{
add counter to another array
rdset counter
}
}

7. 

array temp = elements r,c;
    min = 21;
      for row = 0...a[r] - 1 
    	  for column = 0...a[c] - 1
    		  if position in array < min 
    			  min = position in array;
    			  temp[0] = r;
    			  temp[1] = c;

     return temp; 
	 
8. it should start at row = r and column = c. Also, you want to save the position at a[row][column]

Part D

1. ch = charAt(str.length() - 1);
2. for (int i = 0; i < a.length; i++)
	sum += a[i];
3. for (int j = 0; j < a.length; j++)
	if ( a[j] < 0)
		i = a[j]
		j = a.length;
4. i = str.indexOf("$");
5. str = str.replaceAll(",", "");
   double salary = (double) str;

Part E

1. while (j < a.length) and i = j at the end
2. p1 = {c0, c1, c2, c3}  p2 = {c4, c5, c6, c7}
3. Neither are the polygons because they both dont have the same amount of points as
the drawing polygons
4. first for loop: go to k + 1, add c0 to p2
5. [2, 2]
6. if r = # of rows - 1
	set column to 0

Part F

1. You would get the position of 1 and 2 in the array or you can make a for loop that ignores the string in the array
2. 
for l in lines of in
	str = "";
	x = in.nextLine()
	space = indexOf("  ");
	for i = space...x.length()
	if (!x.substring(i, i + 1).equals(" "))	
		i++
		while(!x.substring(i, i + 1).equals(" "))
			str += x.substring(i, i+1)
			i++
		str += " "
	change str to int
3.
l = in.nextLine()
firsthalf = l.length() / 2
newstring = l.substring(y, l.length())
secondhalf = newstring.length() / 2
firststring = l.substring(firsthalf, secondhalf)
secondstring = l.substring(secondhalf, l.length())
change firststring and secondsecond into ints
4. 
l = in.nextLine()
firsthalf = l.length() / 2
newstring = l.substring(y, l.length())
secondhalf = newstring.length() / 2
str = changetostrings(l, firsthalf, secondhalf)
change str into ints

changetostrings(l, firsthalf, secondhalf)
str += l.substring(firsthalf, secondhalf)
str += l.substring(secondhalf, l.length())
return str

Part G

1. 
lengthOfRun(a, i)
array y = a.length()
i = 0
max = 0
while i < a.length
   j = i + 1
   while a[i] == a[j]
      j++
   
   max = j - i
   add max into y
   i = j + 1
return y[i-1]

2. 
string1 = ""
string2 = ""
string3 = ""
if str.length() > 0
{
	i = indexOf(",")
	string1 = str.substring(0, i)
	str = str.replace(str.substring(0, i+1), "")
}
if str.length() > 0
{
	i = indexOf(",")
	string2 = str.substring(0, i)
	str = str.replace(str.substring(0, i+1), "")
}
if str.length() > 0
{
	string3 = str.substring(0, str.length())
}

3. 
array a = given array
arraylist b = a.length
for i = 0... a.length
	if a[i] is not in b
		add a[i] into b
sort b
k = input number
array final
number = b.get(k-1)
for i = 0 ... a.length
	if a[i] = number
		add i into final
return final

Part H

1. 
sortThree(a, start)

if start > a.length -3
  if start > a.length 2 {return}
  else
     if a[start] > a[start+1]
      swap(a, start, start +1)
else
  if a[start] > a[start+1]
    swap 
  if a[start+1 > a[start +2]
    swap
  if a[start+1] < a[start]
    swap

2. Done