You can often use a stack or queue to avoid recursion. Implement this algorithm for computing all permutations of a string str without recursion.

Add "|" + str to the queue.
While the queue is not empty,
Remove the element at the front. It has the form s | t. (That is, s is the substring before the | and t is the substring after the |.)
For each letter c in t, add s + c + "|" + (t with c removed) to the queue
However, if the | is at the end (that is, t is empty), add s to the result.
Using this algorithm, implement a method

public static ArrayList<String> permutations(String s)
Draft: Your program should work for a string of length ? 2.

Use the following files:

Test1.java

import java.util.*;
import org.junit.*;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Collections;

public class Test1
{
   @Test public void length2()
   {
      ArrayList<String> result = Lists.permutations("Is");
      Collections.sort(result);
      assertEquals("[Is, sI]", result.toString());
   }

   @Test public void length1()
   {
      ArrayList<String> result = Lists.permutations("I");
      Collections.sort(result);
      assertEquals("[I]", result.toString());
   }

   @Test public void length0()
   {
      ArrayList<String> result = Lists.permutations("");
      Collections.sort(result);
      assertEquals(Collections.singletonList(""), result);
   }
}
Test2.java

import java.util.*;
import org.junit.*;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Collections;

public class Test2 
{

   @Test public void length3()
   {
      ArrayList<String> result = Lists.permutations("SJU");
      Collections.sort(result);
      assertEquals("[JSU, JUS, SJU, SUJ, UJS, USJ]", result.toString());
   }

   @Test public void length4()
   {        
      ArrayList<String> result = Lists.permutations("Fred");
      Collections.sort(result);
      assertEquals("[Fder, Fdre, Fedr, Ferd, Frde, Fred, dFer, dFre, deFr, derF, drFe, dreF, eFdr, eFrd, edFr, edrF, erFd, erdF, rFde, rFed, rdFe, rdeF, reFd, redF]", result.toString());
   }

   @Test public void length10()
   {
      ArrayList<String> result = Lists.permutations("1234567890");
      assertEquals(2*3*4*5*6*7*8*9*10, result.size());
   }
}