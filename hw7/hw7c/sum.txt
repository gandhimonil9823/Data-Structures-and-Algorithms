Solve Exercise P14.6 in your textbook. Don't be one of those knuckleheads who asks on Piazza where that is. It's in your textbook.

Add a parameter debug. If it is set to true, print the ranges that you are merging, exactly in the following format:

Merging 0...1 and 2...3
In the draft, you may assume that the array length is a power of two, and you only print the messages. Don't actually do any merging. You can do this part without knowing what merge sort does.

For example, if the array has length 16, you print

Merging 0...0 and 1...1
Merging 2...2 and 3...3
Merging 4...4 and 5...5
Merging 6...6 and 7...7
Merging 8...8 and 9...9
Merging 10...10 and 11...11
Merging 12...12 and 13...13
Merging 14...14 and 15...15
Merging 0...1 and 2...3
Merging 4...5 and 6...7
Merging 8...9 and 10...11
Merging 12...13 and 14...15
Merging 0...3 and 4...7
Merging 8...11 and 12...15
Merging 0...7 and 8...15
In your solution, provide your pseudocode as comments.

Use the following files:

MergeSortTest.java

import java.util.*;
import org.junit.*;
import static org.junit.Assert.*;

public class MergeSortTest
{
   @Test
   public void mergeTest()
   {
      int[] nums = { 1, 4, 1, 2, 7, 0, 4, 6, 7, 5, 8 };
      MergeSorter.merge(2, 4, 8, nums, false);
      assertArrayEquals(nums, new int[] { 1, 4, 0, 1, 2, 4, 6, 7, 7, 5, 8});                                          
   }

   @Test
   public void testLength15()
   {
      int[] nums = { 1, 2, 11, 3, 12, 15, 6, 13, 5, 14, 4, 10, 8, 9, 7 };
      MergeSorter.sort(nums, false);
      for (int i = 0; i < nums.length; i++)
         assertEquals(i + 1, nums[i]);
   }

   @Test
   public void testLength16()
   {
      int[] nums = { 1, 2, 11, 16, 3, 12, 6, 13, 5, 14, 15, 4, 10, 8, 9, 7 };
      MergeSorter.sort(nums, false);
      for (int i = 0; i < nums.length; i++)
         assertEquals(i + 1, nums[i]);
   }

   @Test
   public void testLength17()
   {
      int[] nums = { 1, 17, 2, 11, 3, 16, 12, 6, 13, 5, 14, 15, 4, 10, 8, 9, 7 };
      MergeSorter.sort(nums, false);
      for (int i = 0; i < nums.length; i++)
         assertEquals(i + 1, nums[i]);
   }

   @Test
   public void testOtherValues()
   {
      int[] nums = new int[101];
      for (int i = 1; i < nums.length; i++) 
         nums[(31 * i) % nums.length] = i * i;
      MergeSorter.sort(nums, false);
      for (int i = 0; i < nums.length; i++)
         assertEquals(i * i, nums[i]);
   }
}
RegionDemo.java

public class RegionDemo
{
   public static void main(String[] args)
   {
      System.out.println("Array of length 4: ");
      MergeSorter.sort(new int[4], true);
      System.out.println("Array of length 15: ");
      MergeSorter.sort(new int[15], true);
      System.out.println("Array of length 20: ");
      MergeSorter.sort(new int[20], true);
   }