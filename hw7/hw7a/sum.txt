Reimplement the SelectionSorter of Section 14.1 so that it can sort an array of Object, using a Comparator. (For simplicity, we don't use type parameters.)

In the draft, only implement the minimumPosition method. Change it to a public method.

Use the following files:

SelectionTest.java

import java.util.*;
import org.junit.*;
import static org.junit.Assert.*;

public class SelectionTest
{
   @Test
   public void testStringMinPos()
   {
      String[] strings = {"Mary", "had", "a", "little", "lamb"};
      Comparator<String> comp = (s, t) -> s.compareTo(t);
      // Java 8 shortcut for an object of a class that implements 
      // Comparator and whose compare method has parameters s, t 
      // and whose body is { return s.compareTo(t) }

      int p = SelectionSorter.minimumPosition(strings, 1, comp);
      assertEquals(2, p);
      p = SelectionSorter.minimumPosition(strings, 0, comp);
      assertEquals(0, p);
      p = SelectionSorter.minimumPosition(strings, 3, comp);
      assertEquals(4, p);
   }

   @Test 
   public void testStringLengthMinPos()
   {
      String[] strings = {"Mary", "had", "a", "little", "lamb"};
      Comparator<String> comp = (s, t) -> s.length() - t.length();
      int p = SelectionSorter.minimumPosition(strings, 0, comp);
      assertEquals(2, p);
   }

   @Test 
   public void testIntegerMinPos()
   {
      Integer[] ints = { new Integer(7), new Integer(3), new Integer(8), new Integer(2) };
      Comparator<Integer> comp = (a, b) -> Integer.compare(a, b);
      int p = SelectionSorter.minimumPosition(ints, 0, comp);
      assertEquals(3, p);
   }
}
ArrayUtil.java

import java.util.Random;

/**
   This class contains utility methods for array manipulation.
*/  
public class ArrayUtil
{ 
   private static Random generator = new Random();

   /**
      Creates an integer array filled with random values.
      @param length the length of the array
      @param n the number of possible random values
      @return an array filled with length numbers between
      0 and n - 1
   */
   public static int[] randomIntArray(int length, int n)
   {  
      int[] a = new int[length];      
      for (int i = 0; i < a.length; i++)
      {
         a[i] = generator.nextInt(n);
      }
      
      return a;
   }

   /**
      Swaps two entries of an array.
      @param a the array
      @param i the first position to swap
      @param j the second position to swap
   */
   public static void swap(int[] a, int i, int j)
   {
      int temp = a[i];
      a[i] = a[j];
      a[j] = temp;
   }

   /**
      Swaps two entries of an array.
      @param a the array
      @param i the first position to swap
      @param j the second position to swap
   */
   public static void swap(Object[] a, int i, int j)
   {
      Object temp = a[i];
      a[i] = a[j];
      a[j] = temp;
   }

}
      
SelectionTest2.java

import java.util.*;
import org.junit.*;
import static org.junit.Assert.*;

public class SelectionTest2
{
   @Test
   public void testStringSort()
   {
      String[] names = { "Peter", "Pauline", "Sue" };
      Comparator<String> comp = (s, t) -> s.compareTo(t); 
      SelectionSorter.sort(names, comp);
      assertArrayEquals(names, new String[] { "Pauline", "Peter", "Sue" });
   }

   @Test
   public void testStringByLengthSort()
   {
      String[] names = { "Peter", "Pauline", "Sue" };
      Comparator<String> comp = (s, t) -> s.length() - t.length(); 
      SelectionSorter.sort(names, comp);
      assertArrayEquals(names, new String[] { "Sue", "Peter", "Pauline" });

   }

   @Test
   public void testIntSort()
   {
      Integer[] values = { 
         new Integer(9), new Integer(7), new Integer(1), new Integer(2)};
      Comparator<Integer> comp = (m, n) -> Integer.compare(m, n);
      SelectionSorter.sort(values, comp);
      assertEquals("[1, 2, 7, 9]", Arrays.toString(values));
   }
}